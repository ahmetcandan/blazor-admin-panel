@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using BlazorAdminPanel.Model;
@inject ISnackbar Snackbar
@inject ProtectedLocalStorage ProtectedLocalStorage
@inject IDialogService Dialog

<MudDialog>
    <DialogContent>
        <MudItem xs="12" sm="6" md="4">
            <MudTextField @bind-Value="RoleName" Label="Role" Variant="Variant.Text"></MudTextField>
        </MudItem>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit" Disabled="string.IsNullOrEmpty(RoleName)">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private IdentityServiceClient service;
    private string RoleName;
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }
    [Parameter]
    public PageOpeningType Mode { get; set; }
    [Parameter]
    public IdentityRole Data { get; set; }

    protected async override Task OnInitializedAsync()
    {
        var token = await ProtectedLocalStorage.GetAsync<TokenModel>("token");
        if (token.Success && token.Value != null && !string.IsNullOrEmpty(token.Value.Token) && token.Value.Expiration > DateTime.UtcNow)
            service = new IdentityServiceClient(token.Value.Token);
        else
            NavigationManager.NavigateTo("/login?return=roles");

        if (Mode == PageOpeningType.Edit)
            RoleName = Data.Name;
    }

    void Cancel()
    {
        MudDialog.Cancel();
    }

    async Task Submit()
    {
        try
        {
            ResponseModel response = null;
            if (Mode == PageOpeningType.Edit)
            {
                response = await service.RolesPUTAsync(new RoleModel
                    {
                        Id = Data == null ? null : Data.Id,
                        Name = RoleName
                    });
                Snackbar.Add(response.Message, response.Successful ? Severity.Success : Severity.Error);
            }
            else if (Mode == PageOpeningType.New)
            {
                response = await service.RolesPOSTAsync(new CreateRoleModel
                    {
                        Name = RoleName
                    });
                Snackbar.Add(response.Message, response.Successful ? Severity.Success : Severity.Error);
            }
            MudDialog.Close(DialogResult.Ok(true));
        }

        catch (ApiException ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
            if (ex.StatusCode == 401 || ex.StatusCode == 403)
                NavigationManager.NavigateTo("/login?return=roles");
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
}
