@page "/login"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ISnackbar Snackbar
@inject ProtectedLocalStorage ProtectedLocalStorage

<MudOverlay @bind-Visible="isVisible" DarkBackground="true" />
<MudGrid>
    <MudItem xs="12" sm="6" md="4">
        <MudTextField @bind-Value="Username" Label="Username" Variant="Variant.Text"></MudTextField>
    </MudItem>
    <MudItem xs="12" sm="6" md="4">
        <MudTextField @bind-Value="Password" Label="Password" Variant="Variant.Text" InputType="InputType.Password"></MudTextField>
    </MudItem>
    <MudItem xs="12" sm="6" md="4">
        <MudButton OnClick="@(() => LoginAsync())">Login</MudButton>
    </MudItem>
</MudGrid>

@code {
    private bool isVisible;
    private string Username;
    private string Password;

    public void SetOverlay(bool value)
    {
        isVisible = value;
        StateHasChanged();
    }

    private async Task LoginAsync()
    {
        SetOverlay(true);
        try
        {
            var service = new IdentityServiceClient();
            var tokenResponse = await service.TokenAsync(new LoginModel
                {
                    Username = Username,
                    Password = Password
                });
            if (tokenResponse.Successful)
            {
                await ProtectedLocalStorage.SetAsync("token", tokenResponse.Data);
                Dictionary<string, string> parameters = new Dictionary<string, string>();
                var queryString = NavigationManager.Uri.Substring((NavigationManager.BaseUri + "login/").Length).Split("&");
                foreach (var item in queryString)
                {
                    var pr = item.Split("=");
                    parameters.Add(pr[0], pr[1]);
                }
                if (parameters.ContainsKey("return"))
                    NavigationManager.NavigateTo("/" + parameters["return"]);

                Snackbar.Add(tokenResponse.Message, Severity.Success);
            }
            else
                Snackbar.Add($"Login error: {tokenResponse.Message}", Severity.Error);
        }
        catch (ApiException ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
        SetOverlay(false);
    }
}
